// ====================================================================
// seeders/driverSeeder.js — creates realistic Driver docs for Driver.js
// ====================================================================
/*
Usage:
  node seeders/driverSeeder.js --count=50 --force --country=Uganda --districts="Kampala,Wakiso,Mukono,Jinja"

Env:
  MONGODB_URI=mongodb://localhost:27017/phone_verification

Notes:
- Relies on Driver.js pre-save hooks to generate unique registrationId.
- Ensures E.164 phone numbers (+2567XXXXXXXX) and valid future licenseExpiryDate.
*/

require('dotenv').config();
const mongoose = require('mongoose');
const path = require('path');

// Adjust path to your model location if needed
let Driver;
try { Driver = require(path.join('..', 'Driver')); } catch {
  Driver = require(path.join('..', 'models', 'Driver'));
}

// ---- CLI args ----
function parseArgs() {
  const args = Object.fromEntries(
    process.argv.slice(2).map((a) => {
      const [k, v] = a.split('=');
      return [k.replace(/^--/, ''), v === undefined ? true : v];
    })
  );
  return {
    count: Math.max(1, parseInt(args.count || args.n || '10', 10)),
    force: Boolean(args.force || args.f),
    country: args.country || 'Uganda',
    districts: (args.districts || 'Kampala,Wakiso,Mukono,Jinja,Mbarara,Gulu,Lira,Mbale,Fort Portal,Masaka,Hoima')
      .split(',')
      .map((s) => s.trim())
      .filter(Boolean),
  };
}

// ---- Data helpers ----
const FIRST = ['Grace','Peter','Amina','John','Mary','Joseph','Anita','Paul','Ruth','Brian','Daniel','Agnes','Stella','Ivan','Noah','Claire','Samuel','Joan','Nicholas'];
const LAST  = ['Kato','Namakula','Okello','Ssebagala','Mukasa','Achan','Ouma','Kabugo','Nabirye','Lumu','Kawesa','Mutebi','Nansubuga','Kaggwa','Nassaka','Okoth','Kizito','Baluku','Tumuheirwe','Ntege'];
const VEH_TYPES = ['motorcycle','tricycle','pickup','van','truck','refrigerated truck','other'];

const pick = (arr) => arr[Math.floor(Math.random()*arr.length)];

function e164UG(localIdx) {
  // generate +2567XXXXXXXX, deterministic-ish from index
  const base = 700000000 + (localIdx % 9000000); // 7xx series
  return `+256${base}`;
}

function ugVehicleNumber(i) {
  // Simple UG-like pattern: UAA 123C, cycling letters
  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  const a = letters[(i * 7) % 26];
  const b = letters[(i * 13) % 26];
  const c = letters[(i * 19) % 26];
  const num = String(100 + (i % 900));
  return `U${a}${b} ${num}${c}`.toUpperCase();
}

function licenseNumber(i) {
  return `UG-DL-${(100000 + i).toString()}`;
}

function futureDate(yearsMin = 1, yearsMax = 5) {
  const now = new Date();
  const years = yearsMin + Math.floor(Math.random() * (yearsMax - yearsMin + 1));
  const d = new Date(now);
  d.setFullYear(now.getFullYear() + years);
  d.setMonth(Math.floor(Math.random() * 12));
  d.setDate(1 + Math.floor(Math.random() * 28));
  return d;
}

function buildDriver(i, opts) {
  const firstName = pick(FIRST);
  const surname = pick(LAST);
  const district = pick(opts.districts);
  const vehicleType = pick(VEH_TYPES);

  const active = Math.random() < 0.8; // 80% active, 20% pending

  return {
    // registrationId: omitted → generated by model pre-save
    status: active ? 'active' : 'pending',
    registrationDate: new Date(),

    firstName,
    surname,

    phoneNumber: e164UG(i + 1),
    businessAddress: `${Math.floor(Math.random()*100)+1} ${district} Road`,
    district,
    country: opts.country,

    vehicleType,
    vehicleNumber: ugVehicleNumber(i + 1),

    driversLicenseNumber: licenseNumber(i + 1),
    licenseExpiryDate: futureDate(1, 5),

    isPhoneVerified: active,
    rating: active ? Number((3 + Math.random()*2).toFixed(1)) : 0,
    totalRides: active ? Math.floor(Math.random()*500) : 0,
    lastActive: active ? new Date(Date.now() - Math.floor(Math.random()*14)*24*3600*1000) : null,
  };
}

async function seedDrivers(count, force, opts) {
  if (force) {
    console.log('Force enabled → clearing existing drivers…');
    await Driver.deleteMany({});
  }
  let created = 0;
  for (let i = 0; i < count; i++) {
    const data = buildDriver(i, opts);
    try {
      const d = new Driver(data);
      await d.save(); // triggers pre-save hooks (registrationId + validation)
      created++;
      process.stdout.write(`✔︎ ${d.registrationId || '(pending)'} — ${d.phoneNumber}\n`);
    } catch (e) {
      process.stdout.write(`✖ index ${i} — ${e.code === 11000 ? 'duplicate key' : e.message}\n`);
    }
  }
  return created;
}

async function run() {
  const { count, force, ...opts } = parseArgs();
  const uri = process.env.MONGODB_URI || 'mongodb://localhost:27017/phone_verification';
  console.log('Connecting to MongoDB:', uri);
  await mongoose.connect(uri);

  const created = await seedDrivers(count, force, opts);
  console.log(`\n✅ Created ${created}/${count} drivers.`);

  await mongoose.connection.close();
}

if (require.main === module) run().catch((e) => { console.error(e); process.exit(1); });

// ====================================================================
// Optional: add to package.json
//   "scripts": {
//     "seed:drivers": "node seeders/driverSeeder.js"
//node seeders/driverSeeder.js --count=50 --force --districts="Kampala,Wakiso,Mukono,Jinja"
//   }
// ====================================================================
